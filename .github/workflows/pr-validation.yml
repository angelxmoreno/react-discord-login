name: PR Validation

on:
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  validate:
    name: Code Quality & Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run linting
        run: bun run lint

      - name: Run type checking
        run: bun run typecheck

      - name: Run tests
        run: bun run test

      - name: Build package
        run: bun run build

      - name: Check dist directory
        run: |
          if [ ! -d "dist" ]; then
            echo "❌ Build failed - dist directory not created"
            exit 1
          fi
          echo "✅ Build successful - dist directory created"

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run security audit
        run: bun audit
        continue-on-error: true

  conventional-commits:
    name: Validate Commit Messages
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Validate commit messages
        run: |
          # Get the range of commits in this PR
          BASE_SHA="${{ github.event.pull_request.base.sha }}"
          HEAD_SHA="${{ github.event.pull_request.head.sha }}"
          
          # Check each commit message
          git rev-list --reverse ${BASE_SHA}..${HEAD_SHA} | while read commit; do
            echo "Checking commit: $commit"
            git log --format="%s" -n 1 $commit | bunx commitlint
          done

  package-validation:
    name: Package Validation
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Build package
        run: bun run build

      - name: Test package installation
        run: |
          # Pack the package
          npm pack
          
          # Create a test directory
          mkdir test-install
          cd test-install
          
          # Initialize a test package
          bun init -y
          
          # Install the packed package
          PACKAGE_FILE=$(ls ../*.tgz | head -1)
          bun add "file:${PACKAGE_FILE}"
          
          # Try to import the package
          echo "import { useDiscordLogin } from 'react-discord-login'; console.log('✅ Package imports successfully');" > test.js
          bun run test.js

  summary:
    name: Validation Summary
    runs-on: ubuntu-latest
    needs: [validate, security, conventional-commits, package-validation]
    if: always()
    
    steps:
      - name: Check validation results
        run: |
          echo "## PR Validation Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check each job result
          if [ "${{ needs.validate.result }}" == "success" ]; then
            echo "✅ Code Quality & Tests: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Code Quality & Tests: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.security.result }}" == "success" ]; then
            echo "✅ Security Audit: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ Security Audit: Check required" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.conventional-commits.result }}" == "success" ]; then
            echo "✅ Commit Messages: Valid" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Commit Messages: Invalid" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.package-validation.result }}" == "success" ]; then
            echo "✅ Package Validation: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Package Validation: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Fail if any critical jobs failed
          if [ "${{ needs.validate.result }}" != "success" ] || [ "${{ needs.conventional-commits.result }}" != "success" ] || [ "${{ needs.package-validation.result }}" != "success" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "❌ **PR validation failed. Please fix the issues above before merging.**" >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "✅ **All validations passed! PR is ready for review.**" >> $GITHUB_STEP_SUMMARY
          fi